// Generated by CoffeeScript 1.9.3
(function() {
  var Context, base64url, crypto, formatDate,
    hasProp = {}.hasOwnProperty;

  crypto = require('crypto');

  base64url = require('base64-url');

  formatDate = function(date) {
    if (date < 10) {
      return "0" + date;
    } else {
      return "" + date;
    }
  };

  module.exports = Context = (function() {
    Context.SCHEMES = {
      DEVICE: 'Gem-Device',
      APPLICATION: 'Gem-Application',
      IDENTIFY: 'Gem-Identify'
    };

    function Context(schemes) {
      var key, value;
      this.mfa_token = null;
      this.schemes = {
        'Gem-Identify': {
          credentials: null,
          params: ['api_token']
        },
        'Gem-Application': {
          credentials: null,
          params: ['admin_token', 'api_token']
        },
        'Gem-Device': {
          credentials: null,
          params: ['email', 'api_token', 'device_token']
        }
      };
      if (schemes != null) {
        for (key in schemes) {
          if (!hasProp.call(schemes, key)) continue;
          value = schemes[key];
          this.schemes[key] = value;
        }
      }
    }

    Context.prototype.authorize = function(scheme, credentials) {
      if (!(scheme in this.schemes)) {
        throw new Error('invalid scheme');
      }
      if (Object.keys(credentials).length === 0) {
        throw new Error('credentials cannot be empty');
      }
      return this.schemes[scheme]['credentials'] = credentials;
    };

    Context.prototype.authorizer = function(schemes, resource, action, request) {
      var credential, i, len, scheme;
      for (i = 0, len = schemes.length; i < len; i++) {
        scheme = schemes[i];
        if ((this.schemes[scheme] != null) && (this.schemes[scheme]['credentials'] != null)) {
          credential = this.formatCredsForScheme(scheme);
          return {
            scheme: scheme,
            credential: credential
          };
        }
      }
    };

    Context.prototype.formatCredsForScheme = function(scheme) {
      var compiled, credentials, params;
      credentials = this.schemes[scheme]['credentials'];
      params = this.schemes[scheme]['params'];
      compiled = Object.keys(credentials).filter(function(credKey) {
        return params.indexOf(credKey) > -1;
      }).map(function(credKey) {
        return credKey + "=\"" + credentials[credKey] + "\"";
      }).join(', ');
      if (this.mfa_token) {
        compiled = compiled.concat(", mfa_token=\"" + this.mfa_token + "\"");
      }
      return compiled;
    };

    Context.prototype.setMFA = function(mfa_token) {
      return this.mfa_token = mfa_token;
    };

    return Context;

  })();

}).call(this);
