// Generated by CoffeeScript 1.8.0
(function() {
  var Context, base64url, crypto, formatDate,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  crypto = require('crypto');

  base64url = require('base64-url');

  formatDate = function(date) {
    if (date < 10) {
      return "0" + date;
    } else {
      return "" + date;
    }
  };

  module.exports = Context = (function() {
    function Context() {
      this.schemes = {
        'Gem-Developer': {
          usage: null,
          params: ['email', 'privkey']
        },
        'Gem-Application': {
          usage: null,
          params: ['app_url', 'api_token', 'instance_id']
        },
        'Gem-Device': {
          usage: null,
          params: ['app_url', 'api_token', 'user_url', 'user_token', 'device_id']
        },
        'Gem-User': {
          usage: null,
          params: ['app_.url', 'api_token', 'instance_id']
        },
        'Gem-OOB-OTP': {
          usage: null,
          params: ['key', 'secret', 'api_token']
        }
      };
    }

    Context.prototype.authorize = function(scheme, credentials) {
      var field, params;
      params = {};
      if (!(scheme in this.schemes)) {
        return;
      }
      for (field in credentials) {
        if (__indexOf.call(this.schemes[scheme]['params'], field) >= 0) {
          this[field] = credentials[field];
          if (field !== 'privkey' && field !== 'app_url' && field !== 'user_url') {
            params[field] = credentials[field];
          }
        }
      }
      return this.schemes[scheme]['credentials'] = this.formatParams(params);
    };

    Context.prototype.authorizer = function(schemes, resource, action, request) {
      var body, scheme, timestamp, _i, _len;
      if (arguments.length < 4) {
        return {
          scheme: '',
          credential: ''
        };
      }
      for (_i = 0, _len = schemes.length; _i < _len; _i++) {
        scheme = schemes[_i];
        if ((this.schemes[scheme] != null) && (this.schemes[scheme]['credentials'] != null)) {
          if (scheme === 'Gem-Developer') {
            body = request['body'] != null ? request['body'] : '{}';
            timestamp = Math.round(Date.now() / 1000);
            return {
              scheme: scheme,
              credential: "" + this.schemes[scheme]['credentials'] + ", signature=\"" + (this.devSignature(body, timestamp)) + "\", timestamp=\"" + timestamp + "\""
            };
          } else {
            return {
              scheme: scheme,
              credential: this.schemes[scheme]['credentials']
            };
          }
        }
      }
    };

    Context.prototype.devSignature = function(requestBody, timestamp) {
      var content, signature, signer;
      signer = crypto.createSign('RSA-SHA256');
      content = "" + requestBody + "-" + timestamp;
      signer.update(content);
      signature = signer.sign(this.privkey);
      return base64url.encode(signature);
    };

    Context.prototype.formatParams = function(params) {
      var key, parts, value;
      parts = (function() {
        var _results;
        _results = [];
        for (key in params) {
          value = params[key];
          _results.push("" + key + "=\"" + value + "\"");
        }
        return _results;
      })();
      return parts.join(", ");
    };

    return Context;

  })();

}).call(this);
