// Generated by CoffeeScript 1.9.2
(function() {
  var Context, base64url, crypto, formatDate,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  crypto = require('crypto');

  base64url = require('base64-url');

  formatDate = function(date) {
    if (date < 10) {
      return "0" + date;
    } else {
      return "" + date;
    }
  };

  module.exports = Context = (function() {
    Context.SCHEMES = {
      DEVICE: 'Gem-Device',
      APPLICATION: 'Gem-Application',
      IDENTIFY: 'Gem-Identify'
    };

    function Context() {
      this.schemes = {
        'Gem-Identify': {
          credentials: null,
          params: ['api_token']
        },
        'Gem-Application': {
          credentials: null,
          params: ['admin_token', 'api_token']
        },
        'Gem-Device': {
          credentials: null,
          params: ['email', 'api_token', 'device_token']
        }
      };
    }

    Context.prototype.authorize = function(scheme, credentials) {
      var formatedCreds;
      if (!(scheme in this.schemes)) {
        throw new Error('invalid scheme');
      }
      if (Object.keys(credentials).length === 0) {
        throw new Error('credentials cannot be empty');
      }
      formatedCreds = Object.keys(credentials).filter((function(_this) {
        return function(credKey) {
          return indexOf.call(_this.schemes[scheme]['params'], credKey) >= 0;
        };
      })(this)).map(function(credKey) {
        return credKey + "=\"" + credentials[credKey] + "\"";
      }).join(', ');
      return this.schemes[scheme]['credentials'] = formatedCreds;
    };

    Context.prototype.authorizer = function(schemes, resource, action, request) {
      var i, len, scheme;
      for (i = 0, len = schemes.length; i < len; i++) {
        scheme = schemes[i];
        if ((this.schemes[scheme] != null) && (this.schemes[scheme]['credentials'] != null)) {
          return {
            scheme: scheme,
            credential: this.schemes[scheme]['credentials']
          };
        }
      }
    };

    return Context;

  })();

}).call(this);
