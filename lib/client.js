// Generated by CoffeeScript 1.8.0
(function() {
  var Account, Application, Applications, Client, Developer, Developers, User, Users, Wallet;

  Developers = require('./resources/developers');

  Developer = require('./resources/developer');

  Application = require('./resources/application');

  Applications = require('./resources/applications');

  Users = require('./resources/users');

  User = require('./resources/user');

  Account = require('./resources/account');

  Wallet = require('./resources/wallet');

  module.exports = Client = (function() {
    function Client(patchboard, network) {
      this.network = network;
      this.patchboard = function() {
        return patchboard;
      };
      this.resources = function() {
        return patchboard.resources;
      };
      this.developers = new Developers(this.resources().developers, this);
      this.developer = function() {
        if (this._developer) {
          return this._developer;
        }
        throw new Error('You have not yet authenticated as a developer');
      };
      this.users = new Users(this.resources().users, this);
      this.user = function(content, callback) {
        var email, resource, user_url;
        email = content.email, user_url = content.user_url;
        if (email != null) {
          resource = this.resources().user_query({
            email: email
          });
        } else {
          resource = this.resources().user(user_url);
        }
        return resource.get((function(_this) {
          return function(error, userResource) {
            return callback(error, new User(userResource, _this));
          };
        })(this));
      };
      this.application = function() {
        if (this._application) {
          return this._application;
        }
        throw new Error('You have not yet authenticated an application');
      };
      this.wallet = function(url, callback) {
        return this.resources().wallet(url).get(function(error, walletResource) {
          var wallet;
          if (error) {
            return callback(error);
          }
          wallet = new Wallet(walletResource, this);
          return callback(null, wallet);
        });
      };
      this.authenticate = function(scheme, credentials, callback) {
        this.patchboard().context.authorize(scheme, credentials);
        if (scheme === 'Gem-Developer') {
          return this.resources().developers.get((function(_this) {
            return function(error, developerResource) {
              if (error) {
                return callback(error);
              }
              _this._developer = new Developer(developerResource, _this);
              return callback(null, _this._developer);
            };
          })(this));
        }
      };
      this.authenticateDeveloper = function(credentials, callback) {
        this.patchboard().context.authorize('Gem-Developer', credentials);
        return this.resources().developers.get((function(_this) {
          return function(error, resource) {
            if (error) {
              return callback(error);
            }
            _this._developer = new Developer(resource, _this);
            return callback(null, _this._developer);
          };
        })(this));
      };
      this.authenticateOTP = function(credentials) {
        credentials.override = credentials.override || true;
        if ('credential' in this.patchboard().context.schemes['Gem-OOB-OTP']) {
          if (credentials.override === false) {
            throw new Error("This object is already authenticated. To override the authentication, provide the property: 'override: true'");
          }
        }
        this.patchboard().context.authorize('Gem-OOB-OTP', credentials);
        return true;
      };
      this.authenticateApplication = function(credentials, callback) {
        var api_token, app_url, applicationScheme, instance_id;
        app_url = credentials.app_url, api_token = credentials.api_token, instance_id = credentials.instance_id;
        if (!api_token || !instance_id || !app_url) {
          return callback(new Error("api_token, instance_id, and app_url are required"));
        }
        credentials.override || (credentials.override = false);
        applicationScheme = this.patchboard().context.schemes['Gem-Application'];
        if ('credential' in applicationScheme && !credentials.override) {
          return callback(new Error("This object is already authenticated. To override the authentication, provide the property: 'override: true"));
        }
        this.patchboard().context.authorize('Gem-Application', credentials);
        return this.resources().application(app_url).get((function(_this) {
          return function(error, resource) {
            if (error) {
              return callback(error);
            }
            _this._application = new Application(resource, _this);
            return callback(null, _this._application);
          };
        })(this));
      };
      this.authenticateDevice = function(credentials, callback) {
        var deviceScheme, email, user_url;
        credentials.override || (credentials.override = false);
        credentials.fetch || (credentials.fetch = true);
        deviceScheme = this.patchboard().context.schemes['Gem-Device'];
        if ('credentials' in deviceScheme && !credentials.override) {
          return callback(new Error('This object already has Gem-Device authentication. To overwrite it call authenticate_device with override=true.'));
        }
        this.patchboard().context.authorize('Gem-Device', credentials);
        if (credentials.fetch) {
          email = credentials.email, user_url = credentials.user_url;
          return this.user({
            email: email,
            user_url: user_url
          }, function(error, user) {
            return callback(error, user);
          });
        } else {
          return callback(null, true);
        }
      };
      this.beginDeviceAuthorization = function(credentials, callback) {
        var api_token, device_id, email, name, resource;
        name = credentials.name, device_id = credentials.device_id, email = credentials.email, api_token = credentials.api_token;
        this.authenticateOTP({
          api_token: api_token
        });
        resource = this.resources().user_query({
          email: email
        });
        return resource.authorize_device({
          name: name,
          device_id: device_id
        }, function(error) {
          var key, matches, regx, responseHeader;
          responseHeader = error.response.headers['www-authenticate'];
          regx = /key="(.*)"/;
          matches = regx.exec(responseHeader);
          if (matches) {
            key = matches[1];
            return callback(null, key);
          } else {
            return callback(error);
          }
        });
      };
      this.completeDeviceAuthorization = function(credentials, callback) {
        var device_id, email, name, resource;
        this.authenticateOTP(credentials);
        name = credentials.name, device_id = credentials.device_id, email = credentials.email;
        resource = this.resources().user_query({
          email: email
        });
        return resource.authorize_device({
          name: name,
          device_id: device_id
        }, (function(_this) {
          return function(error, userResource) {
            if (error) {
              return callback(error);
            }
            return _this.authenticateDevice({
              api_token: credentials.api_token,
              user_url: userResource.url,
              user_token: userResource.user_token,
              device_id: credentials.device_id
            }, function(error, user) {
              return callback(error, user);
            });
          };
        })(this));
      };
    }

    return Client;

  })();

}).call(this);
