// Generated by CoffeeScript 1.9.2
(function() {
  var Account, Application, Client, SCHEMES, User, Users, Wallet, set_application;

  SCHEMES = require('./context').SCHEMES;

  Application = require('./resources/application');

  Users = require('./resources/users');

  User = require('./resources/user');

  Account = require('./resources/account');

  Wallet = require('./resources/wallet');

  set_application = function(application, client) {
    return client.application = application;
  };

  module.exports = Client = (function() {
    function Client(patchboard, network) {
      this.network = network;
      this.patchboard = patchboard;
      this.resources = patchboard.resources;
      this.context = patchboard.context;
      this.users = new Users({
        resource: this.resources.users,
        client: this
      });
    }

<<<<<<< HEAD
    Client.prototype.authenticate_application = function(_arg, callback) {
      var admin_token, api_token, totp_secret;
      admin_token = _arg.admin_token, api_token = _arg.api_token, totp_secret = _arg.totp_secret;
=======
    Client.prototype.authenticate_application = function(arg, callback) {
      var admin_token, api_token;
      admin_token = arg.admin_token, api_token = arg.api_token;
>>>>>>> 4bf7ba31cdc3da6385dd1e0bd595dd70005e22d1
      this.patchboard.context.authorize('Gem-Application', arguments[0]);
      this.authenticate_identify({
        api_token: api_token
      });
<<<<<<< HEAD
      return this.application({
        totp_secret: totp_secret
      }, function(error, application) {
=======
      return this.application(function(error, application) {
>>>>>>> 4bf7ba31cdc3da6385dd1e0bd595dd70005e22d1
        return callback(error, application);
      });
    };

<<<<<<< HEAD
    Client.prototype.authenticate_identify = function(_arg) {
      var api_token;
      api_token = _arg.api_token;
      return this.patchboard.context.authorize('Gem-Identify', arguments[0]);
    };

    Client.prototype.authenticate_device = function(_arg, callback) {
      var api_token, device_token, email;
      email = _arg.email, api_token = _arg.api_token, device_token = _arg.device_token;
=======
    Client.prototype.authenticate_identify = function(arg) {
      var api_token;
      api_token = arg.api_token;
      return this.patchboard.context.authorize('Gem-Identify', arguments[0]);
    };

    Client.prototype.authenticate_device = function(arg, callback) {
      var api_token, device_token, email;
      email = arg.email, api_token = arg.api_token, device_token = arg.device_token;
>>>>>>> 4bf7ba31cdc3da6385dd1e0bd595dd70005e22d1
      this.patchboard.context.authorize('Gem-Device', arguments[0]);
      this.authenticate_identify({
        api_token: api_token
      });
      return this.user({
        email: email
      }, function(error, user) {
        return callback(error, user);
      });
    };

<<<<<<< HEAD
    Client.prototype.application = function(_arg, callback) {
      var totp_secret;
      totp_secret = _arg.totp_secret;
=======
    Client.prototype.application = function(callback) {
>>>>>>> 4bf7ba31cdc3da6385dd1e0bd595dd70005e22d1
      if (this._application) {
        return this._application;
      }
      return this.resources.app.get((function(_this) {
        return function(error, resource) {
          if (error) {
            return callback(error);
          }
          _this._application = new Application({
            resource: resource,
<<<<<<< HEAD
            client: _this,
            totp_secret: totp_secret
=======
            client: _this
>>>>>>> 4bf7ba31cdc3da6385dd1e0bd595dd70005e22d1
          });
          return callback(null, _this._application);
        };
      })(this));
    };

<<<<<<< HEAD
    Client.prototype.user = function(_arg, callback) {
      var email, resource;
      email = _arg.email;
=======
    Client.prototype.user = function(arg, callback) {
      var email, resource;
      email = arg.email;
>>>>>>> 4bf7ba31cdc3da6385dd1e0bd595dd70005e22d1
      resource = this.resources.user_query({
        email: email
      });
      return resource.get((function(_this) {
        return function(error, resource) {
          return callback(error, new User({
            resource: resource,
            client: _this
          }));
        };
      })(this));
    };

    return Client;

  })();

}).call(this);
