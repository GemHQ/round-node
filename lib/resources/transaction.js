// Generated by CoffeeScript 1.9.1
(function() {
  var Base, Transaction,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Base = require('./base');

  module.exports = Transaction = (function(superClass) {
    extend(Transaction, superClass);

    Transaction.PROPS_LIST = ['value', 'fee', 'confirmations', 'hash', 'status', 'inputs', 'outputs', 'destination_address', 'lock_time', 'network'];

    function Transaction(arg) {
      var client, resource;
      resource = arg.resource, client = arg.client;
      this.client = client;
      this.resource = resource;
      this._setProps(Transaction.PROPS_LIST, resource);
    }

    Transaction.prototype.sign = function(arg, callback) {
      var ref, signature, signatures, txContent, txHash, wallet;
      wallet = arg.wallet;
      if (this.resource.status !== 'unsigned') {
        callback(new Error('Transaction is already signed'));
      }
      if (wallet == null) {
        callback(new Error('A wallet is required to sign a transaction'));
      }
      ref = wallet.prepareTransaction(this.resource), signatures = ref.signatures, txHash = ref.txHash;
      signature = signatures[0];
      txContent = {
        signatures: {
          transaction_hash: txHash,
          inputs: [
            {
              primary: signature
            }
          ]
        }
      };
      return this.resource.update(txContent, (function(_this) {
        return function(error, resource) {
          if (error) {
            return callback(error);
          }
          _this.resource = resource;
          return callback(null, _this);
        };
      })(this));
    };

    Transaction.prototype.approve = function(arg, callback) {
      var mfa_token;
      mfa_token = arg.mfa_token;
      this.client.context.setMFA(mfa_token);
      return this.resource.approve({}, (function(_this) {
        return function(error, resource) {
          if (error) {
            return callback(error);
          }
          _this.resource = resource;
          _this._setProps(Transaction.PROPS_LIST, resource);
          return callback(null, _this);
        };
      })(this));
    };

    Transaction.prototype.cancel = function(callback) {
      return this.resource.cancel((function(_this) {
        return function(error, resource) {
          if (error) {
            return callback(error);
          }
          _this.resource = resource;
          _this._setProps(Transaction.PROPS_LIST, resource);
          return callback(null, _this);
        };
      })(this));
    };

    return Transaction;

  })(Base);

}).call(this);
