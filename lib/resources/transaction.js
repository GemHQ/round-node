// Generated by CoffeeScript 1.9.1
(function() {
  var Base, Promise, Transaction, promisify,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Base = require('./base');

  Promise = require('bluebird');

  promisify = Promise.promisify;

  module.exports = Transaction = (function(superClass) {
    extend(Transaction, superClass);

    Transaction.PROPS_LIST = ['value', 'fee', 'confirmations', 'hash', 'status', 'inputs', 'outputs', 'destination_address', 'lock_time', 'network', 'mfa_uri'];

    function Transaction(arg) {
      var client, resource;
      resource = arg.resource, client = arg.client;
      this.client = client;
      this.resource = resource;
      this._setProps(Transaction.PROPS_LIST, resource);
    }

    Transaction.prototype.sign = function(arg) {
      var ref, signature, signatures, txContent, txHash, wallet;
      wallet = arg.wallet;
      if (this.resource.status !== 'unsigned') {
        Promise.reject(new Error('Transaction is already signed'));
      }
      if (wallet == null) {
        Promise.reject(new Error('A wallet is required to sign a transaction'));
      }
      ref = wallet.prepareTransaction(this.resource), signatures = ref.signatures, txHash = ref.txHash;
      signature = signatures[0];
      txContent = {
        signatures: {
          transaction_hash: txHash,
          inputs: [
            {
              primary: signature
            }
          ]
        }
      };
      this.resource.update = promisify(this.resource.update);
      return this.resource.update(txContent).then((function(_this) {
        return function(resource) {
          _this.resource = resource;
          _this._setProps(Transaction.PROPS_LIST, resource);
          return _this;
        };
      })(this))["catch"](function(error) {
        throw new Error(error);
      });
    };

    Transaction.prototype.approve = function(arg) {
      var mfa_token;
      mfa_token = arg.mfa_token;
      this.client.context.setMFA(mfa_token);
      this.resource.approve = promisify(this.resource.approve);
      return this.resource.approve({}).then((function(_this) {
        return function(resource) {
          _this.resource = resource;
          _this._setProps(Transaction.PROPS_LIST, resource);
          return _this;
        };
      })(this))["catch"](function(error) {
        throw new Error(error);
      });
    };

    Transaction.prototype.cancel = function() {
      this.resource.cancel = promisify(this.resource.cancel);
      return this.resource.cancel().then((function(_this) {
        return function(resource) {
          _this.resource = resource;
          _this._setProps(Transaction.PROPS_LIST, resource);
          return _this;
        };
      })(this))["catch"](function(error) {
        throw new Error(error);
      });
    };

    return Transaction;

  })(Base);

}).call(this);
