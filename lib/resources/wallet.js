// Generated by CoffeeScript 1.9.1
(function() {
  var Accounts, Base, CoinOp, MultiWallet, PassphraseBox, Promise, Wallet,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Accounts = require('./accounts');

  Base = require('./base');

  CoinOp = require('coinop-node');

  PassphraseBox = CoinOp.crypto.PassphraseBox;

  MultiWallet = CoinOp.bit.MultiWallet;

  Promise = require('bluebird');

  module.exports = Wallet = (function(superClass) {
    extend(Wallet, superClass);

    function Wallet(arg) {
      var application, client, multiwallet, resource;
      resource = arg.resource, client = arg.client, multiwallet = arg.multiwallet, application = arg.application;
      this.client = client;
      this.resource = resource;
      this.multiwallet = multiwallet;
      this.application = application;
      this.name = resource.name, this.cosigner_public_seed = resource.cosigner_public_seed, this.backup_public_seed = resource.backup_public_seed, this.primary_public_seed = resource.primary_public_seed, this.balance = resource.balance, this.default_account = resource.default_account, this.transactions = resource.transactions;
    }

    Wallet.prototype.accounts = function() {
      return this.getAssociatedCollection({
        collectionClass: Accounts,
        name: 'accounts',
        options: {
          wallet: this
        }
      });
    };

    Wallet.prototype.unlock = function(arg, callback) {
      var passphrase;
      passphrase = arg.passphrase;
      return PassphraseBox.decrypt(passphrase, this.resource.primary_private_seed, (function(_this) {
        return function(error, primary_seed) {
          console.log("in the callback");
          if (error) {
            return callback(error);
          }
          _this.multiwallet = new MultiWallet({
            "private": {
              primary: primary_seed
            },
            "public": {
              cosigner: _this.resource.cosigner_public_seed,
              backup: _this.resource.backup_public_seed
            }
          });
          return callback(null, _this);
        };
      })(this));
    };

    Wallet.prototype.backup_key = function() {
      return this.multiwallet.trees.backup.seed.toString('hex');
    };

    return Wallet;

  })(Base);

}).call(this);
