// Generated by CoffeeScript 1.8.0
(function() {
  var Accounts, CoinOp, MultiWallet, PassphraseBox, Rules, Wallet;

  Rules = require('./rules');

  Accounts = require('./accounts');

  CoinOp = require('coinop-node');

  PassphraseBox = CoinOp.crypto.PassphraseBox;

  MultiWallet = CoinOp.bit.MultiWallet;

  module.exports = Wallet = (function() {
    function Wallet(resource, client, options) {
      this.client = function() {
        return client;
      };
      this.resource = function() {
        return resource;
      };
      this.multiWallet = null;
      this.name = resource.name, this.network = resource.network, this.cosigner_public_seed = resource.cosigner_public_seed, this.backup_public_seed = resource.backup_public_seed, this.primary_public_seed = resource.primary_public_seed, this.balance = resource.balance, this.default_account = resource.default_account, this.subscriptions = resource.subscriptions, this.transactions = resource.transactions;
    }

    Wallet.prototype.rules = function() {
      var rulesResource;
      if (!this._rules) {
        rulesResource = this.resource().rules;
        this._rules = new Rules(rulesResource, this.client());
      }
      return this._rules;
    };

    Wallet.prototype.accounts = function(callback) {
      var accounts, resource;
      if (this._accounts) {
        return callback(null, this._accounts);
      }
      resource = this.resource().accounts;
      accounts = new Accounts(resource, this.client(), this);
      return accounts.loadCollection({
        wallet: this
      }, (function(_this) {
        return function(error, accounts) {
          if (error) {
            return callback(error);
          }
          _this._accounts = accounts;
          return callback(null, _this._accounts);
        };
      })(this));
    };

    Wallet.prototype.unlock = function(passphrase) {
      var primary_seed;
      primary_seed = PassphraseBox.decrypt(passphrase, this.resource().primary_private_seed);
      return this.multiWallet = new MultiWallet({
        "private": {
          primary: primary_seed
        },
        "public": {
          cosigner: this.resource().cosigner_public_seed,
          backup: this.resource().backup_public_seed
        }
      });
    };

    Wallet.prototype.update = function(content, callback) {
      return this.resource().update(content, (function(_this) {
        return function(error, resource) {
          if (error) {
            return callback(error);
          }
          _this.resource = function() {
            return resource;
          };
          _this.name = resource.name;
          return callback(null, _this);
        };
      })(this));
    };

    return Wallet;

  })();

}).call(this);
