// Generated by CoffeeScript 1.8.0
(function() {
  var Account, Accounts, Base, CoinOp, MultiWallet, PassphraseBox, Wallet, promisify,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Account = require('./account');

  Accounts = require('./accounts');

  Base = require('./base');

  CoinOp = require('coinop-node');

  promisify = require('bluebird').promisify;

  PassphraseBox = CoinOp.crypto.PassphraseBox;

  PassphraseBox.decrypt = promisify(PassphraseBox.decrypt);

  MultiWallet = CoinOp.bit.MultiWallet;

  module.exports = Wallet = (function(_super) {
    __extends(Wallet, _super);

    function Wallet(_arg) {
      var application, client, multiwallet, resource;
      resource = _arg.resource, client = _arg.client, multiwallet = _arg.multiwallet, application = _arg.application;
      this.client = client;
      this.resource = resource;
      this.multiwallet = multiwallet;
      this.application = application;
      this.name = resource.name, this.cosigner_public_seed = resource.cosigner_public_seed, this.backup_public_seed = resource.backup_public_seed, this.key = resource.key, this.primary_public_seed = resource.primary_public_seed, this.balance = resource.balance, this.default_account = resource.default_account, this.transactions = resource.transactions;
    }

    Wallet.prototype.accounts = function(_arg) {
      var fetch;
      fetch = (_arg != null ? _arg : {}).fetch;
      return this.getAssociatedCollection({
        collectionClass: Accounts,
        name: 'accounts',
        options: {
          wallet: this
        },
        fetch: fetch
      });
    };

    Wallet.prototype.account = function(_arg) {
      var name;
      name = _arg.name;
      return this.accounts().then(function(accounts) {
        return accounts.get(name);
      })["catch"](function(error) {
        throw new Error(error);
      });
    };

    Wallet.prototype.unlock = function(_arg) {
      var passphrase;
      passphrase = _arg.passphrase;
      return PassphraseBox.decrypt({
        passphrase: passphrase,
        encrypted: this.resource.primary_private_seed
      }).then((function(_this) {
        return function(primary_seed) {
          _this.multiwallet = new MultiWallet({
            "private": {
              primary: primary_seed
            },
            "public": {
              cosigner: _this.resource.cosigner_public_seed,
              backup: _this.resource.backup_public_seed
            }
          });
          return _this;
        };
      })(this))["catch"](function(error) {
        throw new Error(error);
      });
    };

    Wallet.prototype.backup_key = function() {
      return this.multiwallet.trees.backup.seed.toString('hex');
    };

    return Wallet;

  })(Base);

}).call(this);
