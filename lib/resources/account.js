// Generated by CoffeeScript 1.9.2
(function() {
  var Account, Addresses, Base, PaymentGenerator, Transactions,
<<<<<<< HEAD
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
=======
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;
>>>>>>> 4bf7ba31cdc3da6385dd1e0bd595dd70005e22d1

  Addresses = require('./addresses');

  Transactions = require('./transactions');

  PaymentGenerator = require('./payment_generator');

  Base = require('./base');

<<<<<<< HEAD
  module.exports = Account = (function(_super) {
    __extends(Account, _super);

    function Account(_arg) {
      var client, resource, wallet;
      resource = _arg.resource, client = _arg.client, wallet = _arg.wallet;
      this.client = client;
      this.resource = resource;
      this.wallet = wallet;
=======
  module.exports = Account = (function(superClass) {
    extend(Account, superClass);

    function Account(arg) {
      var client, resource, wallet;
      resource = arg.resource, client = arg.client, wallet = arg.wallet;
      this.client = client;
      this.resource = resource;
      this.wallet = wallet;
      ({
        payments: new PaymentGenerator({
          resource: this.resource.payments,
          client: client
        })
      });
>>>>>>> 4bf7ba31cdc3da6385dd1e0bd595dd70005e22d1
      this.name = resource.name, this.balance = resource.balance, this.path = resource.path, this.pending = resource.pending, this.network = resource.network;
    }

    Account.prototype.addresses = function(callback) {
      return this.getAssociatedCollection({
        collectionClass: Addresses,
        name: 'addresses',
        callback: callback
      });
    };

<<<<<<< HEAD
    Account.prototype.pay = function(_arg, callback) {
      var confirmations, mfa_token, multiwallet, payees, redirect_uri, tx, wallet;
      payees = _arg.payees, confirmations = _arg.confirmations, redirect_uri = _arg.redirect_uri, mfa_token = _arg.mfa_token;
      if (!payees) {
        return callback(new Error('Payees must be specified'));
      }
      wallet = this.wallet;
      multiwallet = wallet.multiwallet;
      if (multiwallet == null) {
        return callback(new Error('You must unlock the wallet before attempting a transaction'));
      }
      tx = new Transactions({
        resource: this.resource.transactions({}),
        client: this.client
      });
      return tx.create({
        payees: payees,
        confirmations: confirmations,
        redirect_uri: redirect_uri
      }, function(error, payment) {
        if (error) {
          return callback(error);
        }
        return payment.sign({
          multiwallet: multiwallet
        }, function(error, signedTx) {
          console.log("signing!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
          if (error) {
            return callback(error);
          }
          if (wallet.application != null) {
            if (mfa_token == null) {
              mfa_token = wallet.application.get_mfa();
            }
            return signedTx.approve({
              mfa_token: mfa_token
            }, function(error, data) {
              console.log("approving -----------------------");
              return callback(error, signedTx);
            });
          } else {
            console.log("other ???????????????????????????");
            return callback(null, signedTx);
          }
=======
    Account.prototype.pay = function(arg, callback) {
      var confirmations, mfa_token, multiwallet, network, payees, redirect_uri;
      payees = arg.payees, confirmations = arg.confirmations, redirect_uri = arg.redirect_uri, mfa_token = arg.mfa_token;
      if (!payees) {
        return callback(new Error('Payees must be specified'));
      }
      multiwallet = this.wallet.multiwallet;
      if (typeof multiWallet === "undefined" || multiWallet === null) {
        return callback(new Error('You must unlock the wallet before attempting a transaction'));
      }
      network = this.network;
      return this.transactions({}, function(error, transactions) {
        if (error) {
          return callback(error);
        }
        return transactions.create({
          payees: payees,
          confirmations: confirmations,
          redirect_uri: redirect_uri
        }, function(error, payment) {
          if (error) {
            return callback(error);
          }
          return payment.sign({
            multiwallet: multiwallet,
            network: network
          });
>>>>>>> 4bf7ba31cdc3da6385dd1e0bd595dd70005e22d1
        });
      });
    };

    Account.prototype.transactions = function(query, callback) {
      if (arguments.length === 1) {
        callback = arguments[0];
        query = {};
      }
      return this.getAssociatedCollection({
        collectionClass: Transactions,
        name: 'transactions',
        resource: this.resource.transactions(query),
        callback: callback
      });
    };

    return Account;

  })(Base);

}).call(this);
