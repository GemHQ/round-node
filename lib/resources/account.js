// Generated by CoffeeScript 1.8.0
(function() {
  var Account, Addresses, PaymentGenerator, Transactions;

  Addresses = require('./addresses');

  Transactions = require('./transactions');

  PaymentGenerator = require('./payment_generator');

  module.exports = Account = (function() {
    function Account(resource, client, options) {
      var balance, name;
      this.client = function() {
        return client;
      };
      this.resource = function() {
        return resource;
      };
      name = resource.name, balance = resource.balance;
      this.wallet = options.wallet;
    }

    Account.prototype.addresses = function(callback) {
      var addresses, resource;
      if (this._addresses) {
        return callback(null, this._addresses);
      }
      resource = this.resource().addresses;
      addresses = new Addresses(resource, this.client());
      return addresses.loadCollection((function(_this) {
        return function(error, addresses) {
          if (error) {
            return callback(error);
          }
          _this._addresses = addresses;
          return callback(null, _this._addresses);
        };
      })(this));
    };

    Account.prototype.pay = function(content, callback) {
      var multiwallet, payees;
      payees = content.payees;
      if (!payees) {
        return callback(new Error('Payees must be specified'));
      }
      multiwallet = this.wallet._multiwallet;
      if (!multiwallet) {
        return callback(new Error('You must unlock the wallet before attempting a transaction'));
      }
      return this.payments().unsigned(payees, function(error, payment) {
        if (error) {
          return callback(error);
        }
        return payment.sign(multiwallet, function(error, data) {
          return callback(error, data);
        });
      });
    };

    Account.prototype.transactions = function(callback) {
      var resource, transactions;
      if (this._transactions) {
        return callback(null, this._transactions);
      }
      resource = this.resource().transactions({});
      transactions = new Transactions(resource, this.client());
      return transactions.loadCollection((function(_this) {
        return function(error, transactions) {
          if (error) {
            return callback(error);
          }
          _this._transactions = transactions;
          return callback(null, _this._transactions);
        };
      })(this));
    };

    Account.prototype.payments = function() {
      return this._payments != null ? this._payments : this._payments = new PaymentGenerator(this.resource().payments, this.client());
    };

    Account.prototype.update = function(content, callback) {
      return this.resource().update(content, (function(_this) {
        return function(error, resource) {
          if (error) {
            return callback(error);
          }
          _this.resource = function() {
            return resource;
          };
          _this.name = resource.name;
          _this.balance = resource.balance;
          return callback(null, _this);
        };
      })(this));
    };

    return Account;

  })();

}).call(this);
