// Generated by CoffeeScript 1.8.0
(function() {
  var Account, Addresses, Base, Promise, Transactions,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Addresses = require('./addresses');

  Transactions = require('./transactions');

  Base = require('./base');

  Promise = require('bluebird');

  module.exports = Account = (function(_super) {
    __extends(Account, _super);

    function Account(_arg) {
      var client, resource, wallet;
      resource = _arg.resource, client = _arg.client, wallet = _arg.wallet;
      this.client = client;
      this.resource = resource;
      this.wallet = wallet;
      this.name = resource.name, this.balance = resource.balance, this.path = resource.path, this.pending = resource.pending, this.network = resource.network, this.pending_balance = resource.pending_balance, this.available_balance = resource.available_balance;
    }

    Account.prototype.addresses = function(_arg) {
      var fetch;
      fetch = (_arg != null ? _arg : {}).fetch;
      return this.getAssociatedCollection({
        collectionClass: Addresses,
        name: 'addresses',
        fetch: fetch
      });
    };

    Account.prototype.pay = function(_arg) {
      var confirmations, mfa_token, multiwallet, payees, redirect_uri, txs, wallet;
      payees = _arg.payees, confirmations = _arg.confirmations, redirect_uri = _arg.redirect_uri, mfa_token = _arg.mfa_token;
      if (!payees) {
        return Promise.reject(new Error('Payees must be specified'));
      }
      wallet = this.wallet;
      multiwallet = wallet.multiwallet;
      if (multiwallet == null) {
        return Promise.reject(new Error('You must unlock the wallet before attempting a transaction'));
      }
      txs = new Transactions({
        resource: this.resource.transactions({}),
        client: this.client
      });
      return txs.create({
        payees: payees,
        confirmations: confirmations,
        redirect_uri: redirect_uri
      }).then(function(payment) {
        return payment.sign({
          wallet: multiwallet
        });
      }).then(function(signedTx) {
        if (wallet.application != null) {
          if (mfa_token == null) {
            mfa_token = wallet.application.get_mfa();
          }
          return signedTx.approve({
            mfa_token: mfa_token
          }).then(function(signedTx) {
            return signedTx;
          });
        } else {
          return signedTx;
        }
      })["catch"](function(error) {
        throw new Error(error);
      });
    };

    Account.prototype.transactions = function(_arg) {
      var fetch;
      fetch = (_arg != null ? _arg : {}).fetch;
      return this.getAssociatedCollection({
        collectionClass: Transactions,
        name: 'transactions',
        fetch: fetch
      });
    };

    return Account;

  })(Base);

}).call(this);
