// Generated by CoffeeScript 1.8.0
(function() {
  var AssetType, Base, Promise, Transaction, Transactions, promisify,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Transactions = require('./transactions');

  Transaction = require('./transaction');

  Base = require('./base');

  Promise = require('bluebird');

  promisify = Promise.promisify;

  module.exports = AssetType = (function(_super) {
    __extends(AssetType, _super);

    function AssetType(_arg) {
      var client, resource, wallet;
      resource = _arg.resource, client = _arg.client, wallet = _arg.wallet;
      this.client = client;
      this.resource = resource;
      this.wallet = wallet;
      this.name = resource.name, this.network = resource.network, this.protocol = resource.protocol, this.fungible = resource.fungible, this.locked = resource.locked;
    }

    AssetType.prototype.transactions = function(_arg) {
      var fetch;
      fetch = (_arg != null ? _arg : {}).fetch;
      return this.getAssociatedCollection({
        collectionClass: Transactions,
        name: 'transactions',
        fetch: fetch
      });
    };

    AssetType.prototype.transfer = function(_arg) {
      var metadata, outputs;
      outputs = _arg.outputs, metadata = _arg.metadata;
      this.resource.transfer = promisify(this.resource.transfer);
      return this.resource.transfer({
        outputs: outputs,
        metadata: metadata
      }).then((function(_this) {
        return function(resource) {
          return new Transaction({
            resource: resource,
            client: _this.client
          });
        };
      })(this))["catch"](function(error) {
        throw new Error(error);
      });
    };

    AssetType.prototype.issue = function(_arg) {
      var outputs;
      outputs = _arg.outputs;
      this.resource.issue = promisify(this.resource.issue);
      return this.resource.issue({
        outputs: outputs
      }).then((function(_this) {
        return function(resource) {
          return new Transaction({
            resource: resource,
            client: _this.client
          });
        };
      })(this))["catch"](function(error) {
        throw new Error(error);
      });
    };

    return AssetType;

  })(Base);

}).call(this);
