// Generated by CoffeeScript 1.8.0
(function() {
  var Account, Accounts, Collection, Promise, VALID_NETWORKS, promisify,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Account = require('./account');

  Collection = require('./collection');

  Promise = require('bluebird');

  promisify = Promise.promisify;

  VALID_NETWORKS = ['bitcoin', 'bitcoin_testnet', 'litecoin', 'dogecoin', 'bcy'];

  module.exports = Accounts = (function(_super) {
    __extends(Accounts, _super);

    function Accounts() {
      return Accounts.__super__.constructor.apply(this, arguments);
    }

    Accounts.prototype.type = Account;

    Accounts.prototype.key = 'name';

    Accounts.prototype.create = function(_arg) {
      var name, network, rsrc;
      name = _arg.name, network = _arg.network;
      if (VALID_NETWORKS.indexOf(network) < 0) {
        return Promise.reject(new Error("Network must be one of the following: " + (VALID_NETWORKS.join(' '))));
      }
      rsrc = this.resource({});
      rsrc.create = promisify(rsrc.create);
      return rsrc.create(arguments[0]).then((function(_this) {
        return function(resource) {
          var account;
          account = new Account({
            resource: resource,
            client: _this.client,
            wallet: _this.wallet
          });
          _this.add(account);
          return account;
        };
      })(this))["catch"](function(error) {
        throw new Error(error);
      });
    };

    Accounts.prototype.get = function(name) {
      return Accounts.__super__.get.call(this, name).then(function(account) {
        return account;
      })["catch"]((function(_this) {
        return function(error) {
          var res;
          res = _this.wallet.resource.account_query({
            name: name
          });
          res.get = promisify(res.get);
          return res.get().then(function(resource) {
            var account;
            account = new Account({
              resource: resource,
              client: _this.client,
              wallet: _this.wallet
            });
            _this.add(account);
            return account;
          })["catch"](function(error) {
            throw new Error(error);
          });
        };
      })(this));
    };

    return Accounts;

  })(Collection);

}).call(this);
