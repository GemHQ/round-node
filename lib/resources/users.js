// Generated by CoffeeScript 1.8.0
(function() {
  var CoinOp, Collection, MultiWallet, NETWORK, PassphraseBox, User, Users, promisify,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  User = require('./user');

  CoinOp = require('coinop-node');

  promisify = require('bluebird').promisify;

  PassphraseBox = CoinOp.crypto.PassphraseBox;

  PassphraseBox.encrypt = promisify(PassphraseBox.encrypt);

  MultiWallet = CoinOp.bit.MultiWallet;

  Collection = require('./collection');

  NETWORK = 'bitcoin';

  module.exports = Users = (function(_super) {
    __extends(Users, _super);

    function Users() {
      return Users.__super__.constructor.apply(this, arguments);
    }

    Users.prototype.type = User;

    Users.prototype.key = 'email';

    Users.prototype.create = function(_arg) {
      var device_name, email, first_name, last_name, multiwallet, passphrase, primary_seed, redirect_uri;
      first_name = _arg.first_name, last_name = _arg.last_name, email = _arg.email, passphrase = _arg.passphrase, device_name = _arg.device_name, redirect_uri = _arg.redirect_uri;
      multiwallet = MultiWallet.generate(['primary'], NETWORK);
      primary_seed = multiwallet.trees.primary.seed.toString('hex');
      return PassphraseBox.encrypt(passphrase, primary_seed).then((function(_this) {
        return function(encrypted_seed) {
          var params, wallet;
          wallet = {
            primary_public_seed: multiwallet.trees.primary.neutered().toBase58(),
            primary_private_seed: encrypted_seed,
            name: 'default'
          };
          params = {
            email: email,
            first_name: first_name,
            last_name: last_name,
            default_wallet: wallet,
            device_name: device_name
          };
          if (redirect_uri != null) {
            params.redirect_uri = redirect_uri;
          }
          _this.resource.create = promisify(_this.resource.create);
          return _this.resource.create(params).then(function(resource) {
            return resource.metadata.device_token;
          })["catch"](function(error) {
            throw new Error(error);
          });
        };
      })(this));
    };

    return Users;

  })(Collection);

}).call(this);
