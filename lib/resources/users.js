// Generated by CoffeeScript 1.9.1
(function() {
  var CoinOp, Collection, MultiWallet, NETWORK, PassphraseBox, User, Users, promisify,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  User = require('./user');

  CoinOp = require('coinop-node');

  PassphraseBox = CoinOp.crypto.PassphraseBox;

  MultiWallet = CoinOp.bit.MultiWallet;

  promisify = require('bluebird').promisify;

  Collection = require('./collection');

  NETWORK = 'bitcoin';

  module.exports = Users = (function(superClass) {
    extend(Users, superClass);

    function Users() {
      return Users.__super__.constructor.apply(this, arguments);
    }

    Users.prototype.type = User;

    Users.prototype.key = 'email';

    Users.prototype.create = function(arg) {
      var device_name, email, encrypted_seed, first_name, last_name, multiwallet, params, passphrase, primary_seed, redirect_uri, wallet;
      first_name = arg.first_name, last_name = arg.last_name, email = arg.email, passphrase = arg.passphrase, device_name = arg.device_name, redirect_uri = arg.redirect_uri;
      multiwallet = MultiWallet.generate(['primary'], NETWORK);
      primary_seed = multiwallet.trees.primary.seed.toString('hex');
      encrypted_seed = PassphraseBox.encrypt(passphrase, primary_seed);
      wallet = {
        primary_public_seed: multiwallet.trees.primary.neutered().toBase58(),
        primary_private_seed: encrypted_seed,
        name: 'default'
      };
      params = {
        email: email,
        first_name: first_name,
        last_name: last_name,
        default_wallet: wallet,
        device_name: device_name
      };
      if (redirect_uri != null) {
        params.redirect_uri = redirect_uri;
      }
      this.resource.create = promisify(this.resource.create);
      return this.resource.create(params).then(function(resource) {
        return resource.metadata.device_token;
      })["catch"](function(error) {
        throw new Error(error);
      });
    };

    return Users;

  })(Collection);

}).call(this);
