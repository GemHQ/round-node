// Generated by CoffeeScript 1.8.0
(function() {
  var CoinOp, Collection, MultiWallet, PassphraseBox, User, Users,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  User = require('./user');

  CoinOp = require('coinop-node');

  PassphraseBox = CoinOp.crypto.PassphraseBox;

  MultiWallet = CoinOp.bit.MultiWallet;

  Collection = require('./collection');

  module.exports = Users = (function(_super) {
    __extends(Users, _super);

    function Users() {
      return Users.__super__.constructor.apply(this, arguments);
    }

    Users.prototype.type = User;

    Users.prototype.create = function(content, callback) {
      var email, encrypted_seed, multiwallet, network, params, passphrase, primary_seed, wallet;
      network = this.client().network;
      email = content.email, passphrase = content.passphrase;
      multiwallet = MultiWallet.generate(['primary', 'backup'], network);
      primary_seed = multiwallet.trees.primary.toBase58();
      encrypted_seed = PassphraseBox.encrypt(passphrase, primary_seed);
      wallet = {
        network: network,
        backup_public_seed: multiwallet.trees.backup.neutered().toBase58(),
        primary_public_seed: multiwallet.trees.primary.neutered().toBase58(),
        primary_private_seed: encrypted_seed,
        name: 'default'
      };
      params = {
        email: email,
        default_wallet: wallet
      };
      return this.resource().create(params, (function(_this) {
        return function(error, resource) {
          var backup_seed, user;
          if (error) {
            return callback(error);
          }
          user = new User(resource, _this.client());
          backup_seed = multiwallet.trees.backup.toBase58();
          return callback(null, backup_seed, user);
        };
      })(this));
    };

    return Users;

  })(Collection);

}).call(this);
