// Generated by CoffeeScript 1.9.2
(function() {
  var CoinOp, Collection, MultiWallet, NETWORK, PassphraseBox, User, Users,
<<<<<<< HEAD
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
=======
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;
>>>>>>> 4bf7ba31cdc3da6385dd1e0bd595dd70005e22d1

  User = require('./user');

  CoinOp = require('coinop-node');

  PassphraseBox = CoinOp.crypto.PassphraseBox;

  MultiWallet = CoinOp.bit.MultiWallet;

  Collection = require('./collection');

  NETWORK = 'bitcoin';

<<<<<<< HEAD
  module.exports = Users = (function(_super) {
    __extends(Users, _super);
=======
  module.exports = Users = (function(superClass) {
    extend(Users, superClass);
>>>>>>> 4bf7ba31cdc3da6385dd1e0bd595dd70005e22d1

    function Users() {
      return Users.__super__.constructor.apply(this, arguments);
    }

    Users.prototype.type = User;

    Users.prototype.key = 'email';

<<<<<<< HEAD
    Users.prototype.create = function(_arg, callback) {
      var device_name, email, encrypted_seed, first_name, last_name, multiwallet, params, passphrase, primary_seed, redirect_uri, wallet;
      first_name = _arg.first_name, last_name = _arg.last_name, email = _arg.email, passphrase = _arg.passphrase, device_name = _arg.device_name, redirect_uri = _arg.redirect_uri;
=======
    Users.prototype.create = function(arg, callback) {
      var device_name, email, encrypted_seed, first_name, last_name, multiwallet, params, passphrase, primary_seed, redirect_uri, wallet;
      first_name = arg.first_name, last_name = arg.last_name, email = arg.email, passphrase = arg.passphrase, device_name = arg.device_name, redirect_uri = arg.redirect_uri;
>>>>>>> 4bf7ba31cdc3da6385dd1e0bd595dd70005e22d1
      multiwallet = MultiWallet.generate(['primary'], NETWORK);
      primary_seed = multiwallet.trees.primary.seed;
      encrypted_seed = PassphraseBox.encrypt(passphrase, primary_seed);
      wallet = {
        primary_public_seed: multiwallet.trees.primary.neutered().toBase58(),
        primary_private_seed: encrypted_seed,
        name: 'default'
      };
      params = {
        email: email,
        first_name: first_name,
        last_name: last_name,
        default_wallet: wallet,
        device_name: device_name
      };
      if (redirect_uri != null) {
        params.redirect_uri = redirect_uri;
      }
      return this.resource.create(params, function(error, resource) {
        if (error) {
          return callback(error);
        }
        return callback(null, resource.metadata.device_token);
      });
    };

    return Users;

  })(Collection);

}).call(this);
