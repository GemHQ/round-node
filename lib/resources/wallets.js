// Generated by CoffeeScript 1.9.2
(function() {
  var CoinOp, Collection, MultiWallet, NETWORK, PassphraseBox, Wallet, Wallets,
<<<<<<< HEAD
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
=======
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;
>>>>>>> 4bf7ba31cdc3da6385dd1e0bd595dd70005e22d1

  Wallet = require('./wallet');

  Collection = require('./collection');

  CoinOp = require('coinop-node');

  PassphraseBox = CoinOp.crypto.PassphraseBox;

  MultiWallet = CoinOp.bit.MultiWallet;

  NETWORK = 'bitcoin';

<<<<<<< HEAD
  module.exports = Wallets = (function(_super) {
    __extends(Wallets, _super);
=======
  module.exports = Wallets = (function(superClass) {
    extend(Wallets, superClass);
>>>>>>> 4bf7ba31cdc3da6385dd1e0bd595dd70005e22d1

    function Wallets() {
      return Wallets.__super__.constructor.apply(this, arguments);
    }

    Wallets.prototype.type = Wallet;

    Wallets.prototype.key = 'name';

<<<<<<< HEAD
    Wallets.prototype.create = function(_arg, callback) {
      var backup_seed, encryptedSeed, multiwallet, name, passphrase, primarySeed, walletData;
      name = _arg.name, passphrase = _arg.passphrase, multiwallet = _arg.multiwallet;
=======
    Wallets.prototype.create = function(arg, callback) {
      var backup_seed, encryptedSeed, multiwallet, name, passphrase, primarySeed, walletData;
      name = arg.name, passphrase = arg.passphrase, multiwallet = arg.multiwallet;
>>>>>>> 4bf7ba31cdc3da6385dd1e0bd595dd70005e22d1
      if (!passphrase) {
        return callback(new Error('Must provide a passphrase'));
      }
      if (!name) {
        return callback(new Error('Must provide a name'));
      }
      if (multiwallet == null) {
        multiwallet = MultiWallet.generate(['primary', 'backup'], NETWORK);
      }
      primarySeed = multiwallet.trees.primary.seed.toString('hex');
      encryptedSeed = PassphraseBox.encrypt(passphrase, primarySeed);
      backup_seed = multiwallet.trees.backup.seed.toString('hex');
      walletData = {
        name: name,
        backup_public_seed: multiwallet.trees.backup.neutered().toBase58(),
        primary_public_seed: multiwallet.trees.primary.neutered().toBase58(),
        primary_private_seed: encryptedSeed
      };
      return this.resource.create(walletData, (function(_this) {
        return function(error, resource) {
          var wallet;
          if (error) {
            return callback(error);
          }
          wallet = new Wallet({
            resource: resource,
            client: _this.client,
            multiwallet: multiwallet,
            application: _this.application
          });
          _this.add(wallet);
          return callback(null, wallet, backup_seed);
        };
      })(this));
    };

    return Wallets;

  })(Collection);

}).call(this);
