// Generated by CoffeeScript 1.8.0
(function() {
  var CoinOp, Collection, MultiWallet, NETWORK, PassphraseBox, Promise, Wallet, Wallets, promisify,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Wallet = require('./wallet');

  Collection = require('./collection');

  CoinOp = require('coinop-node');

  PassphraseBox = CoinOp.crypto.PassphraseBox;

  MultiWallet = CoinOp.bit.MultiWallet;

  Promise = require('bluebird');

  promisify = Promise.promisify;

  NETWORK = 'bitcoin';

  module.exports = Wallets = (function(_super) {
    __extends(Wallets, _super);

    function Wallets() {
      return Wallets.__super__.constructor.apply(this, arguments);
    }

    Wallets.prototype.type = Wallet;

    Wallets.prototype.key = 'name';

    Wallets.prototype.create = function(_arg) {
      var backup_seed, encryptedSeed, multiwallet, name, passphrase, primarySeed, walletData;
      name = _arg.name, passphrase = _arg.passphrase, multiwallet = _arg.multiwallet;
      if (!passphrase) {
        return Promise.reject(new Error('Must provide a passphrase'));
      }
      if (!name) {
        return Promise.reject(new Error('Must provide a name'));
      }
      if (multiwallet == null) {
        multiwallet = MultiWallet.generate(['primary', 'backup'], NETWORK);
      }
      primarySeed = multiwallet.trees.primary.seed.toString('hex');
      encryptedSeed = PassphraseBox.encrypt(passphrase, primarySeed);
      backup_seed = multiwallet.trees.backup.seed.toString('hex');
      walletData = {
        name: name,
        backup_public_seed: multiwallet.trees.backup.neutered().toBase58(),
        primary_public_seed: multiwallet.trees.primary.neutered().toBase58(),
        primary_private_seed: encryptedSeed
      };
      this.resource.create = promisify(this.resource.create);
      return this.resource.create(walletData).then((function(_this) {
        return function(resource) {
          var wallet;
          wallet = new Wallet({
            resource: resource,
            client: _this.client,
            multiwallet: multiwallet,
            application: _this.application
          });
          _this.add(wallet);
          return {
            wallet: wallet,
            backup_seed: backup_seed
          };
        };
      })(this))["catch"](function(error) {
        return error;
      });
    };

    return Wallets;

  })(Collection);

}).call(this);
