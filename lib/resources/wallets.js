// Generated by CoffeeScript 1.8.0
(function() {
  var CoinOp, Collection, MultiWallet, PassphraseBox, Wallet, Wallets,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Wallet = require('./wallet');

  Collection = require('./collection');

  CoinOp = require('coinop');

  PassphraseBox = CoinOp.crypto.PassphraseBox;

  MultiWallet = CoinOp.bit.MultiWallet;

  module.exports = Wallets = (function(_super) {
    __extends(Wallets, _super);

    function Wallets() {
      return Wallets.__super__.constructor.apply(this, arguments);
    }

    Wallets.prototype.type = Wallet;

    Wallets.prototype.key = 'name';

    Wallets.prototype.create = function(content, callback) {
      var backup_seed, encryptedSeed, multiwallet, name, network, passphrase, primarySeed, walletData;
      name = content.name, passphrase = content.passphrase;
      if (!passphrase) {
        return callback(new Error('Must provide a passphrase'));
      }
      if (!name) {
        return callback(new Error('Must provide a name'));
      }
      network = content.network || 'bitcoin_testnet';
      multiwallet = MultiWallet.generate(['primary', 'backup'], network);
      primarySeed = multiwallet.trees.primary.toBase58();
      backup_seed = multiwallet.trees.primary.toBase58();
      encryptedSeed = PassphraseBox.encrypt(passphrase, primarySeed);
      walletData = {
        name: name,
        network: network,
        backup_public_seed: multiwallet.trees.backup.neutered().toBase58(),
        primary_public_seed: multiwallet.trees.primary.neutered().toBase58(),
        primary_private_seed: encryptedSeed
      };
      return this.resource().create(walletData, (function(_this) {
        return function(error, resource) {
          var wallet;
          if (error) {
            return callback(error);
          }
          wallet = new Wallet(resource, _this.client());
          _this.add(name, wallet);
          return callback(null, {
            wallet: wallet,
            backup_seed: backup_seed
          });
        };
      })(this));
    };

    return Wallets;

  })(Collection);

}).call(this);
