// Generated by CoffeeScript 1.8.0
(function() {
  var Application, Rules, Users;

  Users = require('./users');

  Rules = require('./rules');

  module.exports = Application = (function() {
    function Application(resource, client, options) {
      this.name = resource.name, this.api_token = resource.api_token, this.url = resource.url, this.key = resource.key;
      this.resource = function() {
        return resource;
      };
      this.client = function() {
        return client;
      };
    }

    Application.prototype.users = function(callback) {
      var resource, users;
      if (this._users) {
        return callback(null, this._users);
      }
      resource = this.resource().users;
      users = new Users(resource, this.client());
      return users.loadCollection((function(_this) {
        return function(error, users) {
          if (error) {
            return callback(error);
          }
          _this._users = users;
          return callback(null, _this._users);
        };
      })(this));
    };

    Application.prototype.rules = function() {
      return this._rules || new Rules(this.resource().rules, this.client());
    };

    Application.prototype.authorizeInstance = function(credentials, callback) {
      return this.resource().authorize_instance(credentials, function(error, applicationInstance) {
        if (error) {
          return callback(error);
        }
        return callback(null, applicationInstance);
      });
    };

    Application.prototype.update = function(content, callback) {
      return this.resource().update(content, (function(_this) {
        return function(error, resource) {
          if (error) {
            return callback(error);
          }
          _this.resource = function() {
            return resource;
          };
          _this.name = resource.name;
          return callback(null, _this);
        };
      })(this));
    };

    Application.prototype.reset = function(callback) {
      return this.resource().reset((function(_this) {
        return function(error, resource) {
          if (error) {
            return callback(error);
          }
          _this.resource = function() {
            return resource;
          };
          _this.api_token = resource.api_token;
          return callback(null, _this);
        };
      })(this));
    };

    return Application;

  })();

}).call(this);
