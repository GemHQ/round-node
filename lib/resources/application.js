// Generated by CoffeeScript 1.8.0
(function() {
  var Application, Base, TOTP, Users, Wallet, Wallets, promisify,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Users = require('./users');

  Wallet = require('./wallet');

  Wallets = require('./wallets');

  Base = require('./base');

  TOTP = require('onceler').TOTP;

  promisify = require('bluebird').promisify;

  module.exports = Application = (function(_super) {
    __extends(Application, _super);

    function Application(_arg) {
      var client, resource, totp_secret;
      resource = _arg.resource, client = _arg.client, totp_secret = _arg.totp_secret;
      this.resource = resource;
      this.client = client;
      this.totp_secret = totp_secret;
      this.name = resource.name, this.api_token = resource.api_token, this.url = resource.url;
    }

    Application.prototype.authorize_instance = function(_arg) {
      var name;
      name = _arg.name;
      this.resource.authorize_instance = promisify(this.resource.authorize_instance);
      return this.resource.authorize_instance(arguments[0]);
    };

    Application.prototype.users = function(_arg) {
      var fetch;
      fetch = (_arg != null ? _arg : {}).fetch;
      return this.getAssociatedCollection({
        collectionClass: Users,
        name: 'users',
        fetch: fetch
      });
    };

    Application.prototype.wallets = function(_arg) {
      var fetch;
      fetch = (_arg != null ? _arg : {}).fetch;
      return this.getAssociatedCollection({
        collectionClass: Wallets,
        name: 'wallets',
        options: {
          application: this
        },
        fetch: fetch
      });
    };

    Application.prototype.wallet = function(_arg) {
      var name;
      name = (_arg != null ? _arg : {}).name;
      return this.wallets().then(function(wallets) {
        return wallets.get(name);
      })["catch"](function(error) {
        throw new Error(error);
      });
    };

    Application.prototype.get_mfa = function() {
      return new TOTP(this.totp_secret).now();
    };

    return Application;

  })(Base);

}).call(this);
