// Generated by CoffeeScript 1.8.0
(function() {
  var Base, Promise, promisify,
    __hasProp = {}.hasOwnProperty;

  Promise = require('bluebird');

  promisify = Promise.promisify;

  module.exports = Base = (function() {
    function Base() {}

    Base.prototype.getAssociatedCollection = function(_arg) {
      var collectionClass, collectionInstance, name, options, resource;
      collectionClass = _arg.collectionClass, name = _arg.name, resource = _arg.resource, options = _arg.options;
      if (this["_" + name] != null) {
        return Promise.resolve(this["_" + name]);
      }
      if (options == null) {
        options = {};
      }
      resource = resource || this.resource[name];
      collectionInstance = new collectionClass({
        resource: resource,
        client: this.client,
        options: options
      });
      return collectionInstance.loadCollection(options).then((function(_this) {
        return function(collectionInstance) {
          return _this["_" + name] = collectionInstance;
        };
      })(this))["catch"](function(error) {
        throw new Error(error);
      });
    };

    Base.prototype.update = function(content) {
      this.resource.update = promisify(this.resource.update);
      return this.resource.update(content).then((function(_this) {
        return function(resource) {
          var key, val;
          _this.resource = resource;
          for (key in content) {
            if (!__hasProp.call(content, key)) continue;
            val = content[key];
            _this[key] = val;
          }
          return _this;
        };
      })(this))["catch"](function(error) {
        throw new Error(error);
      });
    };

    Base.prototype._setProps = function(propsList, copyed) {
      return propsList.forEach((function(_this) {
        return function(prop) {
          return _this[prop] = copyed[prop];
        };
      })(this));
    };

    return Base;

  })();

}).call(this);
