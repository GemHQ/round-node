// Generated by CoffeeScript 1.9.2
(function() {
  var Base, Devices, User, Wallets,
<<<<<<< HEAD
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
=======
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;
>>>>>>> 4bf7ba31cdc3da6385dd1e0bd595dd70005e22d1

  Wallets = require('./wallets');

  Base = require('./base');

  Devices = require('./devices');

<<<<<<< HEAD
  module.exports = User = (function(_super) {
    __extends(User, _super);

    function User(_arg) {
      var client, resource;
      resource = _arg.resource, client = _arg.client;
=======
  module.exports = User = (function(superClass) {
    extend(User, superClass);

    function User(arg) {
      var client, resource;
      resource = arg.resource, client = arg.client;
>>>>>>> 4bf7ba31cdc3da6385dd1e0bd595dd70005e22d1
      this.client = client;
      this.resource = resource;
      this.email = resource.email, this.url = resource.url, this.first_name = resource.first_name, this.last_name = resource.last_name, this.user_token = resource.user_token, this.default_wallet = resource.default_wallet;
    }

    User.prototype.wallet = function(callback) {
      var resource, wallets;
      if (this._wallet) {
        return callback(null, this._wallet);
      }
      resource = this.resource.wallets;
      wallets = new Wallets({
        resource: resource,
        client: this.client
      });
      return wallets.loadCollection(function(error, wallets) {
        if (error) {
          return callback(error);
        }
        this._wallet = wallets.get(0);
        return callback(null, this._wallet);
      });
    };

    User.prototype.devices = function(callback) {
      var devices, resource;
      resource = this.client.resources.devices_query({
        email: this.email
      });
      devices = new Devices({
        resource: resource,
        client: this.client
      });
      return callback(null, devices);
    };

    return User;

  })(Base);

}).call(this);
