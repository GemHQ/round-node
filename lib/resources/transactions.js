// Generated by CoffeeScript 1.8.0
(function() {
  var Collection, Promise, Transaction, Transactions, promisify,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Transaction = require('./transaction');

  Collection = require('./collection');

  Promise = require('bluebird');

  promisify = Promise.promisify;

  module.exports = Transactions = (function(_super) {
    __extends(Transactions, _super);

    function Transactions() {
      return Transactions.__super__.constructor.apply(this, arguments);
    }

    Transactions.prototype.type = Transaction;

    Transactions.prototype.create = function(_arg) {
      var confirmations, payees, redirect_uri, rsrc;
      payees = _arg.payees, confirmations = _arg.confirmations, redirect_uri = _arg.redirect_uri;
      if (!payees) {
        return Promise.reject(new Error('Must have a list of payees'));
      }
      if (confirmations == null) {
        confirmations = 6;
      }
      rsrc = this.resource({});
      rsrc.create = promisify(rsrc.create);
      return rsrc.create({
        utxo_confirmations: confirmations,
        payees: payees,
        redirect_uri: redirect_uri
      }).then((function(_this) {
        return function(resource) {
          var payment;
          return payment = new Transaction({
            resource: resource,
            client: _this.client
          });
        };
      })(this))["catch"](function(error) {
        throw new Error(error);
      });
    };

    return Transactions;

  })(Collection);

}).call(this);
