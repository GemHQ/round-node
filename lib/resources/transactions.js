// Generated by CoffeeScript 1.9.1
(function() {
  var Collection, Promise, Transaction, Transactions, promisify,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Transaction = require('./transaction');

  Collection = require('./collection');

  Promise = require('bluebird');

  promisify = Promise.promisify;

  module.exports = Transactions = (function(superClass) {
    extend(Transactions, superClass);

    function Transactions() {
      return Transactions.__super__.constructor.apply(this, arguments);
    }

    Transactions.prototype.type = Transaction;

    Transactions.prototype.create = function(arg) {
      var confirmations, payees, redirect_uri;
      payees = arg.payees, confirmations = arg.confirmations, redirect_uri = arg.redirect_uri;
      if (!payees) {
        return Promise.reject(new Error('Must have a list of payees'));
      }
      if (confirmations == null) {
        confirmations = 6;
      }
      this.resource.create = promisify(this.resource.create);
      return this.resource.create({
        utxo_confirmations: confirmations,
        payees: payees,
        redirect_uri: redirect_uri
      }).then((function(_this) {
        return function(resource) {
          var payment;
          return payment = new Transaction({
            resource: resource,
            client: _this.client
          });
        };
      })(this))["catch"](function(error) {
        throw new Error(error);
      });
    };

    return Transactions;

  })(Collection);

}).call(this);
