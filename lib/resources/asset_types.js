// Generated by CoffeeScript 1.8.0
(function() {
  var AssetType, AssetTypes, Collection, Promise, promisify,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AssetType = require('./asset_type');

  Collection = require('./collection');

  Promise = require('bluebird');

  promisify = Promise.promisify;

  module.exports = AssetTypes = (function(_super) {
    __extends(AssetTypes, _super);

    function AssetTypes() {
      return AssetTypes.__super__.constructor.apply(this, arguments);
    }

    AssetTypes.prototype.type = AssetType;

    AssetTypes.prototype.create = function(_arg) {
      var name, network, protocol, rsrc, ticker_symbol;
      name = _arg.name, network = _arg.network, protocol = _arg.protocol, ticker_symbol = _arg.ticker_symbol;
      if (network == null) {
        network = 'bcy';
      }
      if (protocol == null) {
        protocol = 'openassets';
      }
      rsrc = this.resource({});
      rsrc.create = promisify(rsrc.create);
      return rsrc.create({
        name: name,
        network: network,
        protocol: protocol,
        ticker_symbol: ticker_symbol
      }).then((function(_this) {
        return function(resource) {
          var assetType;
          assetType = new AssetType({
            resource: resource,
            client: _this.client,
            wallet: _this.wallet
          });
          _this.add(assetType);
          return assetType;
        };
      })(this))["catch"](function(error) {
        throw new Error(error);
      });
    };

    return AssetTypes;

  })(Collection);

}).call(this);
