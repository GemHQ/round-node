// Generated by CoffeeScript 1.8.0
(function() {
  var Application, Collection;

  Application = require('./application');

  module.exports = Collection = (function() {
    var _isNumber;

    _isNumber = function(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    };

    function Collection(applicationsResource, client, callback) {
      this.resource = function() {
        return applicationsResource;
      };
      this.client = function() {
        return client;
      };
      this._collection = null;
      this._modelList = null;
    }

    Collection.prototype.loadCollection = function(props, callback) {
      if (arguments.length === 1) {
        callback = arguments[0];
        props = {};
      }
      return this.resource().list((function(_this) {
        return function(error, resourceArray) {
          var key, resource, wrappedResource, _i, _len;
          if (error) {
            return callback(error);
          }
          _this._modelList = resourceArray.map(function(resource) {
            return new _this.type(resource, _this.client(), props);
          });
          if (_this.key) {
            _this._collection = {};
            for (_i = 0, _len = resourceArray.length; _i < _len; _i++) {
              resource = resourceArray[_i];
              wrappedResource = new _this.type(resource, _this.client(), props);
              key = resource[_this.key];
              _this.add(key, wrappedResource);
            }
          }
          return callback(null, _this);
        };
      })(this));
    };

    Collection.prototype.refresh = function(callback) {
      return this.loadCollection(callback);
    };

    Collection.prototype.add = function(key, model) {
      if (this._collection != null) {
        this._collection[key] = model;
      }
      return this._modelList.push(model);
    };

    Collection.prototype.get = function(key) {
      var model;
      if (!key) {
        return this._modelList;
      }
      if (_isNumber(key)) {
        model = this._modelList[key];
      } else {
        model = this._collection[key];
      }
      if (model != null) {
        return model;
      } else {
        throw new Error("No object in the " + this.type.name + "s collection for that value.");
      }
    };

    Collection.prototype.getAll = function() {
      return this._modelList;
    };

    return Collection;

  })();

}).call(this);
