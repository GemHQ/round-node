// Generated by CoffeeScript 1.9.1
(function() {
  var Collection, Promise, promisify;

  Promise = require('bluebird');

  promisify = Promise.promisify;

  module.exports = Collection = (function() {
    var _isNumber;

    _isNumber = function(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    };

    function Collection(arg, callback) {
      var client, key, options, resource, value;
      resource = arg.resource, client = arg.client, options = arg.options;
      this.resource = resource;
      this.client = client;
      this._list = null;
      this._hash = null;
      for (key in options) {
        value = options[key];
        this[key] = value;
      }
    }

    Collection.prototype.loadCollection = function(options) {
      if (options == null) {
        options = {};
      }
      this.resource.list = promisify(this.resource.list);
      return this.resource.list().then((function(_this) {
        return function(resourceArray) {
          var i, key, len, model, ref;
          _this._list = resourceArray.map(function(resource) {
            options.resource = resource;
            options.client = _this.client;
            return new _this.type(options);
          });
          if (_this.key) {
            _this._hash = {};
            ref = _this._list;
            for (i = 0, len = ref.length; i < len; i++) {
              model = ref[i];
              key = model.resource[_this.key];
              _this._hash[key] = model;
            }
          }
          return _this;
        };
      })(this))["catch"](function(error) {
        return error;
      });
    };

    Collection.prototype.refresh = function(options) {
      if (options == null) {
        options = {};
      }
      return this.loadCollection(options);
    };

    Collection.prototype.add = function(model) {
      var key;
      if (this.key != null) {
        key = model;
        this._hash[key] = model;
      }
      return this._list.push(model);
    };

    Collection.prototype.get = function(key) {
      var model;
      if (key == null) {
        return this._list;
      }
      if (_isNumber(key)) {
        model = this._list[key];
      } else {
        model = this._hash[key];
      }
      if (model != null) {
        return model;
      } else {
        throw new Error("No object in the " + this.type.name + "s collection for that value.");
      }
    };

    Collection.prototype.getAll = function() {
      return this._list;
    };

    return Collection;

  })();

}).call(this);
