// Generated by CoffeeScript 1.9.2
(function() {
  var Collection;

  module.exports = Collection = (function() {
    var _isNumber;

    _isNumber = function(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    };

<<<<<<< HEAD
    function Collection(_arg, callback) {
      var client, key, options, resource, value;
      resource = _arg.resource, client = _arg.client, options = _arg.options;
=======
    function Collection(arg, callback) {
      var client, key, options, resource, value;
      resource = arg.resource, client = arg.client, options = arg.options;
>>>>>>> 4bf7ba31cdc3da6385dd1e0bd595dd70005e22d1
      this.resource = resource;
      this.client = client;
      this._list = null;
      this._hash = null;
      for (key in options) {
        value = options[key];
        this[key] = value;
      }
    }

    Collection.prototype.loadCollection = function(options, callback) {
      if (arguments.length === 1) {
        callback = arguments[0];
        options = {};
      }
      return this.resource.list((function(_this) {
        return function(error, resourceArray) {
          var i, key, len, model, ref;
          if (error) {
            return callback(error);
          }
          _this._list = resourceArray.map(function(resource) {
<<<<<<< HEAD
            options.resource = resource;
            options.client = _this.client;
            return new _this.type(options);
          });
          if (_this.key) {
            _this._hash = {};
            _ref = _this._list;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              model = _ref[_i];
=======
            return new _this.type({
              resource: resource,
              client: _this.client,
              props: props
            });
          });
          if (_this.key) {
            _this._hash = {};
            ref = _this._list;
            for (i = 0, len = ref.length; i < len; i++) {
              model = ref[i];
>>>>>>> 4bf7ba31cdc3da6385dd1e0bd595dd70005e22d1
              key = model.resource[_this.key];
              _this._hash[key] = model;
            }
          }
          return callback(null, _this);
        };
      })(this));
    };

    Collection.prototype.refresh = function(callback) {
      return this.loadCollection(callback);
    };

    Collection.prototype.add = function(model) {
      var key;
      if (this.key != null) {
        key = model;
        this._hash[key] = model;
      }
      return this._list.push(model);
    };

    Collection.prototype.get = function(key) {
      var model;
      if (key == null) {
        return this._list;
      }
      if (_isNumber(key)) {
        model = this._list[key];
      } else {
        model = this._hash[key];
      }
      if (model != null) {
        return model;
      } else {
        throw new Error("No object in the " + this.type.name + "s collection for that value.");
      }
    };

    Collection.prototype.getAll = function() {
      return this._list;
    };

    return Collection;

  })();

}).call(this);
